{"version":3,"sources":["components/GameOver/GameOver.tsx","components/Gameplay/Gameplay.tsx","App.tsx","index.tsx"],"names":["GameOver","onReset","score","className","type","onClick","Gameplay","useState","questionId","setQuestionId","questions","question","setQuestion","selectedAnswer","setSeletcedAnswer","selectDelay","setSelectDelay","totalWin","totalSum","winStage","setWinStage","gameOver","setGameOver","openMenu","setOpenMenu","handleSelect","event","target","value","trueAnswer","setTimeout","current","useEffect","win","src","alt","role","title","answers","map","answer","htmlFor","classNames","name","id","checked","onChange","disabled","reverse","slice","amout","App","startGame","setStartGame","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0a67533.chunk.js","sourcesContent":["import React from 'react';\nimport './GameOver.scss';\n\ntype Props = {\n  onReset: () => void,\n  score: string,\n};\n\nexport const GameOver: React.FC<Props> = ({ onReset, score }) => {\n  return (\n    <div className=\"over\">\n      <div className=\"over__page\">\n        <div>\n          <p className=\"over__score\">Total score:</p>\n          <h2 className=\"over__money\">{`${score} earned`}</h2>\n        </div>\n        <button\n          className=\"over__button\"\n          type=\"button\"\n          onClick={() => {\n            onReset();\n          }}\n        >\n          Try again\n        </button>\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport questions from '../../api/questions.json';\nimport totalWin from '../../api/totalWin.json';\nimport { GameOver } from '../GameOver';\nimport './Gameplay.scss';\n\nexport const Gameplay: React.FC = () => {\n  const [questionId, setQuestionId] = useState(0);\n  const [question, setQuestion] = useState(questions[0]);\n  const [selectedAnswer, setSeletcedAnswer] = useState('');\n  const [selectDelay, setSelectDelay] = useState(false);\n  const [totalSum] = useState([...totalWin]);\n  const [winStage, setWinStage] = useState(0);\n\n  const [gameOver, setGameOver] = useState(false);\n\n  const [openMenu, setOpenMenu] = useState(false);\n\n  const handleSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSeletcedAnswer(event.target.value);\n\n    if (event.target.value !== question.trueAnswer) {\n      setTimeout(() => {\n        (setSelectDelay(true));\n      }, 1000);\n\n      setTimeout(() => {\n        (setGameOver(true));\n      }, 3000);\n    } else {\n      setTimeout(() => {\n        (setSelectDelay(true));\n      }, 1000);\n\n      if (questionId !== 11) {\n        setQuestionId((current) => {\n          return current + 1;\n        });\n        setWinStage((current) => {\n          return current + 1;\n        });\n      } else {\n        setWinStage((current) => {\n          return current + 1;\n        });\n        setTimeout(() => {\n          setGameOver(true);\n        }, 3000);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (questionId !== 0 || questionId <= 11) {\n      setTimeout(() => {\n        setQuestion(questions[questionId]);\n        setSeletcedAnswer('');\n        setSelectDelay(false);\n      }, 3000);\n    }\n  }, [questionId]);\n\n  const handleReset = () => {\n    setGameOver(false);\n    setQuestionId(0);\n    setWinStage(0);\n    setQuestion(questions[0]);\n    setSeletcedAnswer('');\n    setSelectDelay(false);\n  };\n\n  return (\n    <>\n      {!gameOver ? (\n        <div className=\"gameplay\">\n          <div className=\"desctop-container\">\n            <img\n              src=\"menu.svg\"\n              alt=\"menu\"\n              className=\"gameplay__menu-opener\"\n              onClick={() => {\n                setOpenMenu(true);\n              }}\n              role=\"presentation\"\n            />\n\n            <div className=\"gameplay__quiz\">\n              <h2 className=\"gameplay__title\">{question.title}</h2>\n              <div className=\"gameplay__buttons\">\n                {question.answers.map(answer => (\n                  <label\n                    key={answer}\n                    htmlFor={answer}\n                    className={classNames(\n                      'gameplay__label',\n                      { 'gameplay__label--selected': selectedAnswer === answer },\n                      { 'gameplay__label--correct': answer === question.trueAnswer && selectDelay },\n                      { 'gameplay__label--wrong': selectedAnswer === answer && answer !== question.trueAnswer && selectDelay },\n                    )}\n                  >\n                    <p\n                      className=\"gameplay__answer\"\n                    >\n                      {answer}\n                    </p>\n                    <input\n                      type=\"radio\"\n                      name=\"answer\"\n                      id={answer}\n                      value={answer}\n                      checked={selectedAnswer === answer}\n                      onChange={handleSelect}\n                      disabled={selectedAnswer !== ''}\n                    />\n                  </label>\n                ))}\n              </div>\n            </div>\n\n          </div>\n\n          <div className={classNames('gameplay__total-win', { 'gameplay__total-win--active': openMenu })}>\n\n            <img\n              className=\"gameplay__menu-closer\"\n              src=\"menu-closer.svg\"\n              alt=\"menu-closer\"\n              onClick={() => {\n                setOpenMenu(false);\n              }}\n              role=\"presentation\"\n            />\n\n            <ul className=\"gameplay__winlist\">\n              {totalSum.reverse().slice(0, -1).map(amout => (\n                <li\n                  key={amout.id}\n                  className={classNames(\n                    'gameplay__win-item',\n                    { 'gameplay__win-item--grey': question.id > amout.id },\n                    { 'gameplay__win-item--active': question.id === amout.id },\n                  )}\n                >\n                  {amout.win}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      ) : (\n        <GameOver\n          onReset={handleReset}\n          score={totalWin[winStage].win}\n        />\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { Gameplay } from './components/Gameplay/Gameplay';\n\nexport const App: React.FC = () => {\n  const [startGame, setStartGame] = useState(false);\n\n  return (\n    <div className=\"App\">\n      {!startGame ? (\n        <div className=\"container\">\n          <div className=\"start-menu\">\n            <div className=\"start-menu__logo\">\n              <img\n                className=\"start-menu__img\"\n                src=\"main-img.svg\"\n                alt=\"main-img\"\n              />\n            </div>\n            <div className=\"title-container\">\n              <h1 className=\"start-menu__title\">Who wants to be a millionaire?</h1>\n              <button\n                className=\"start-menu__button\"\n                type=\"button\"\n                onClick={() => {\n                  setStartGame(true);\n                }}\n              >\n                Start\n              </button>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <Gameplay />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}